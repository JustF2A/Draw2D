<!-- Copyright (c) Wiesław Šoltés. All rights reserved. -->
<!-- Licensed under the MIT license. See LICENSE file in the project root for full license information. -->
<UserControl x:Class="Draw2D.Views.MainView"
             xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:Draw2D.Views"
             xmlns:controls="clr-namespace:Draw2D.Controls"
             UseLayoutRounding="True" RenderOptions.BitmapInterpolationMode="HighQuality"
             Focusable="True"
             mc:Ignorable="d"
             d:DesignWidth="800" d:DesignHeight="600">
    <UserControl.Resources>
        <local:IsToolConverter x:Key="IsToolConverter"/>
    </UserControl.Resources>
    <UserControl.KeyBindings>
        <!-- File -->
        <KeyBinding Command="{Binding New}" Gesture="Ctrl+N"/>
        <KeyBinding Command="{Binding Open}" Gesture="Ctrl+O"/>
        <KeyBinding Command="{Binding SaveAs}" Gesture="Ctrl+S"/>
        <KeyBinding Command="{Binding Exit}" Gesture="Alt+F4"/>
    </UserControl.KeyBindings>
    <Grid RowDefinitions="Auto,5,*,5" ColumnDefinitions="340,Auto,*">
        <Menu Background="Transparent" Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3">
            <MenuItem Header="_File">
                <MenuItem Header="New" Command="{Binding New}"/>
                <Separator/>
                <MenuItem Header="_Open..." Command="{Binding Open}"/>
                <Separator/>
                <MenuItem Header="Save _As..." Command="{Binding SaveAs}"/>
                <Separator/>
                <MenuItem Header="E_xit" Command="{Binding Exit}"/>
            </MenuItem>
            <MenuItem Header="_Edit">
                <MenuItem Header="Cu_t" Command="{Binding ContainerView.Selection.Cut}" CommandParameter="{Binding}"/>
                <MenuItem Header="_Copy" Command="{Binding ContainerView.Selection.Copy}" CommandParameter="{Binding}"/>
                <MenuItem Header="_Paste" Command="{Binding ContainerView.Selection.Paste}" CommandParameter="{Binding}"/>
                <MenuItem Header="_Delete" Command="{Binding ContainerView.Selection.Delete}" CommandParameter="{Binding}"/>
                <Separator/>
                <MenuItem Header="_Group" Command="{Binding ContainerView.Selection.Group}" CommandParameter="{Binding}"/>
                <Separator/>
                <MenuItem Header="Select _All" Command="{Binding ContainerView.Selection.SelectAll}" CommandParameter="{Binding}"/>
            </MenuItem>
            <MenuItem Header="_View">
                <MenuItem Header="_Reset Zoom" Command="{Binding ContainerView.ZoomService.ResetZoom}" CommandParameter="True"/>
                <Separator/>
                <MenuItem Header="_Center Zoom" Command="{Binding ContainerView.ZoomService.CenterZoom}" CommandParameter="True"/>
                <Separator/>
                <MenuItem Header="_Fill Zoom" Command="{Binding ContainerView.ZoomService.FillZoom}" CommandParameter="True"/>
                <Separator/>
                <MenuItem Header="_Uniform Zoom" Command="{Binding ContainerView.ZoomService.UniformZoom}" CommandParameter="True"/>
                <Separator/>
                <MenuItem Header="Uniform_ToFill Zoom" Command="{Binding ContainerView.ZoomService.UniformToFillZoom}" CommandParameter="True"/>
            </MenuItem>
            <MenuItem Header="_Tool">
                <MenuItem Header="_None" Command="{Binding SetTool}" CommandParameter="None">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=None, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Selection" Command="{Binding SetTool}" CommandParameter="Selection">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Selection, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Guide" Command="{Binding SetTool}" CommandParameter="Guide">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Guide, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Point" Command="{Binding SetTool}" CommandParameter="Point">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Point, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Line" Command="{Binding SetTool}" CommandParameter="Line">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Line, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Pol_y Line" Command="{Binding SetTool}" CommandParameter="PolyLine">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=PolyLine, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_Cubic Bezier" Command="{Binding SetTool}" CommandParameter="CubicBezier">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=CubicBezier, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_Quadratic Bezier" Command="{Binding SetTool}" CommandParameter="QuadraticBezier">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=QuadraticBezier, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Con_ic" Command="{Binding SetTool}" CommandParameter="Conic">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Conic, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Pat_h" Command="{Binding SetTool}" CommandParameter="Path">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Path, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="Path T_ools" IsEnabled="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Path, Mode=OneWay}">
                    <MenuItem Header="_Line" Command="{Binding SetTool}" CommandParameter="Line">
                        <MenuItem.Icon>
                            <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool.Settings.CurrentTool, FallbackValue={x:Null}, Converter={StaticResource IsToolConverter}, ConverterParameter=PolyLine, Mode=OneWay}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Cubic Bezier" Command="{Binding SetTool}" CommandParameter="CubicBezier">
                        <MenuItem.Icon>
                            <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool.Settings.CurrentTool, FallbackValue={x:Null}, Converter={StaticResource IsToolConverter}, ConverterParameter=CubicBezier, Mode=OneWay}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Quadratic Bezier" Command="{Binding SetTool}" CommandParameter="QuadraticBezier">
                        <MenuItem.Icon>
                            <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool.Settings.CurrentTool, FallbackValue={x:Null}, Converter={StaticResource IsToolConverter}, ConverterParameter=QuadraticBezier, Mode=OneWay}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="Con_ic" Command="{Binding SetTool}" CommandParameter="Conic">
                        <MenuItem.Icon>
                            <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool.Settings.CurrentTool, FallbackValue={x:Null}, Converter={StaticResource IsToolConverter}, ConverterParameter=Conic, Mode=OneWay}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                    <MenuItem Header="_Move" Command="{Binding SetTool}" CommandParameter="Move">
                        <MenuItem.Icon>
                            <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool.Settings.CurrentTool, FallbackValue={x:Null}, Converter={StaticResource IsToolConverter}, ConverterParameter=Move, Mode=OneWay}"/>
                        </MenuItem.Icon>
                    </MenuItem>
                </MenuItem>
                <Separator/>
                <MenuItem Header="Scr_ibble" Command="{Binding SetTool}" CommandParameter="Scribble">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Scribble, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Rectangle" Command="{Binding SetTool}" CommandParameter="Rectangle">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Rectangle, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <MenuItem Header="_Ellipse" Command="{Binding SetTool}" CommandParameter="Ellipse">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Ellipse, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="_Text" Command="{Binding SetTool}" CommandParameter="Text">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding CurrentTool, Converter={StaticResource IsToolConverter}, ConverterParameter=Text, Mode=OneWay}"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
            <MenuItem Header="_Debug">
                <MenuItem Header="DrawDirtyRects" Click="DebugDrawDirtyRects_Click">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding $parent[local:MainView].DrawDirtyRects}"/>
                    </MenuItem.Icon>
                </MenuItem>
                <Separator/>
                <MenuItem Header="DrawFps" Click="DebugDrawFps_Click">
                    <MenuItem.Icon>
                        <CheckBox BorderThickness="0" IsHitTestVisible="False" IsChecked="{Binding $parent[local:MainView].DrawFps}"/>
                    </MenuItem.Icon>
                </MenuItem>
            </MenuItem>
        </Menu>
        <Grid RowDefinitions="55*,Auto,45*" Grid.Row="2" Grid.Column="0">
            <TabControl Classes="default" Grid.Row="0" TabStripPlacement="Top">
                <TabItem Classes="default" Header="Tool">
                    <TabControl Classes="default" TabStripPlacement="Top">
                        <TabItem Classes="default" Header="Current">
                            <ContentControl Content="{Binding CurrentTool.Settings}"/>
                        </TabItem>
                        <TabItem Classes="default" Header="Intersections">
                            <Grid RowDefinitions="Auto,*">
                                <ComboBox Classes="default" Grid.Row="0" x:Name="Intersections" Items="{Binding CurrentTool.Intersections}" SelectedIndex="0">
                                    <ComboBox.DataTemplates>
                                        <DataTemplate>
                                            <TextBlock Classes="default" Text="{Binding Title}"/>
                                        </DataTemplate>
                                    </ComboBox.DataTemplates>
                                </ComboBox>
                                <ContentControl Grid.Row="1" Content="{Binding ElementName=Intersections, Path=SelectedItem.Settings}"/>
                            </Grid>
                        </TabItem>
                        <TabItem Classes="default" Header="Filters">
                            <Grid RowDefinitions="Auto,*">
                                <ComboBox Classes="default" Grid.Row="0" x:Name="Filters" Items="{Binding CurrentTool.Filters}" SelectedIndex="0">
                                    <ComboBox.DataTemplates>
                                        <DataTemplate>
                                            <TextBlock Classes="default" Text="{Binding Title}"/>
                                        </DataTemplate>
                                    </ComboBox.DataTemplates>
                                </ComboBox>
                                <ContentControl Grid.Row="1" Content="{Binding ElementName=Filters, Path=SelectedItem.Settings}"/>
                            </Grid>
                        </TabItem>
                        <TabItem Classes="default" Header="Tools">
                            <ListBox Classes="default" Items="{Binding Tools}" SelectedItem="{Binding CurrentTool}">
                                <ListBox.DataTemplates>
                                    <DataTemplate>
                                        <TextBlock Classes="default" Text="{Binding Title}"/>
                                    </DataTemplate>
                                </ListBox.DataTemplates>
                            </ListBox>
                        </TabItem>
                    </TabControl>
                </TabItem>
                <TabItem Classes="default" Header="Path">
                    <Grid RowDefinitions="Auto,*,Auto,Auto">
                        <TextBlock Classes="default" Text="SVG Path:" Grid.Row="0"/>
                        <TextBox x:Name="svgPathData" Classes="default" AcceptsReturn="True" AcceptsTab="True" Text="" Grid.Row="1"/>
                        <Button Classes="default" Content="From SVG Path Data" Command="{Binding FromSvgPathData}" CommandParameter="{Binding #svgPathData}" Grid.Row="2"/>
                        <Button Classes="default" Content="To SVG Path Data" Command="{Binding ToSvgPathData}" CommandParameter="{Binding #svgPathData}" Grid.Row="3"/>
                    </Grid>
                </TabItem>
                <TabItem Classes="default" Header="Json">
                    <Grid RowDefinitions="Auto,Auto,Auto,Auto">
                        <TextBlock Classes="default" Text="Path:" Grid.Row="0"/>
                        <TextBox x:Name="path" Classes="default" Text="container.json" Grid.Row="1"/>
                        <Button Classes="default" Content="Open Container" Command="{Binding OpenContainer}" CommandParameter="{Binding #path.Text}" Grid.Row="2"/>
                        <Button Classes="default" Content="Save Container" Command="{Binding SaveContainer}" CommandParameter="{Binding #path.Text}" Grid.Row="3"/>
                    </Grid>
                </TabItem>
            </TabControl>
            <GridSplitter Grid.Row="1"/>
            <TabControl Classes="default" Grid.Row="2" TabStripPlacement="Top">
                <TabItem Classes="default" Header="Views">
                    <TabControl Classes="default" TabStripPlacement="Top">
                        <TabItem Classes="default" Header="Current">
                            <ContentControl Content="{Binding ContainerView.CurrentContainer}"/>
                        </TabItem>
                        <TabItem Classes="default" Header="Working">
                            <ContentControl Content="{Binding ContainerView.WorkingContainer}"/>
                        </TabItem>
                        <TabItem Classes="default" Header="Views">
                            <ListBox Classes="default" Items="{Binding ContainerViews}" SelectedItem="{Binding ContainerView}">
                                <ListBox.DataTemplates>
                                    <DataTemplate>
                                        <TextBlock Classes="default" Text="{Binding Title}"/>
                                    </DataTemplate>
                                </ListBox.DataTemplates>
                            </ListBox>
                        </TabItem>
                    </TabControl>
                </TabItem>
                <TabItem Classes="default" Header="Hovered">
                    <ContentControl Content="{Binding ContainerView.Selection.Hovered}"/>
                </TabItem>
                <TabItem Classes="default" Header="Style">
                    <ContentControl Content="{Binding ContainerView.CurrentContainer.CurrentStyle}"/>
                </TabItem>
                <TabItem Classes="default" Header="Renderer">
                    <Grid RowDefinitions="Auto,Auto,Auto,Auto,Auto,Auto" ColumnDefinitions="*,150">
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="0" Text="ZoomSpeed"/>
                        <TextBox Classes="default" Grid.Column="1" Grid.Row="0" Text="{Binding ContainerView.ZoomService.ZoomSpeed}"/>
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="1" Text="ZoomX"/>
                        <TextBox Classes="default" Grid.Column="1" Grid.Row="1" Text="{Binding ContainerView.ZoomService.ZoomX}"/>
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="2" Text="ZoomY"/>
                        <TextBox Classes="default" Grid.Column="1" Grid.Row="2" Text="{Binding ContainerView.ZoomService.ZoomY}"/>
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="3" Text="OffsetX"/>
                        <TextBox Classes="default" Grid.Column="1" Grid.Row="3" Text="{Binding ContainerView.ZoomService.OffsetX}"/>
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="4" Text="OffsetY"/>
                        <TextBox Classes="default" Grid.Column="1" Grid.Row="4" Text="{Binding ContainerView.ZoomService.OffsetY}"/>
                        <TextBlock Classes="default" Grid.Column="0" Grid.Row="5" Text="CustomDraw"/>
                        <CheckBox Classes="default" Grid.Column="1" Grid.Row="5" IsChecked="{Binding ContainerView.ZoomService.CustomDraw, Mode=TwoWay}"/>
                    </Grid>
                </TabItem>
            </TabControl>
        </Grid>
        <GridSplitter Grid.Row="2" Grid.Column="1"/>
        <DockPanel Classes="views" Grid.Row="2" Grid.Column="2">
            <TabStrip Items="{Binding ContainerViews}" SelectedItem="{Binding ContainerView, Mode=TwoWay}" Focusable="false" DockPanel.Dock="Top">
                <TabStrip.Styles>
                    <Style Selector="TabStripItem">
                        <Setter Property="Background" Value="{DynamicResource ThemeBackgroundBrush}"/>
                        <Setter Property="FontSize" Value="{DynamicResource FontSizeNormal}"/>
                        <Setter Property="Foreground" Value="{DynamicResource ThemeForegroundLowBrush}"/>
                        <Setter Property="HorizontalContentAlignment" Value="Left"/>
                        <Setter Property="Padding" Value="4"/>
                        <Setter Property="Margin" Value="0" />
                    </Style>
                    <Style Selector="TabStripItem:pointerover">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush3}"/>
                    </Style>
                    <Style Selector="TabStripItem:selected">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush2}"/>
                    </Style>
                    <Style Selector="TabStripItem:selected:focus">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush2}"/>
                    </Style>
                    <Style Selector="TabStripItem:selected:pointerover">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush2}"/>
                    </Style>
                    <Style Selector="TabStripItem:selected:focus:pointerover">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush2}"/>
                    </Style>
                    <Style Selector="Button.tab">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="0"/>
                        <Setter Property="Padding" Value="0"/>
                        <Setter Property="Margin" Value="0"/>
                    </Style>
                    <Style Selector="Button.tab:pointerover">
                        <Setter Property="Background" Value="{DynamicResource ThemeAccentBrush3}" />
                    </Style>
                    <Style Selector="TabStripItem:selected Button.tab Path">
                        <Setter Property="Fill" Value="{DynamicResource ThemeForegroundLowBrush}" />
                    </Style>
                    <Style Selector="TabStripItem:pointerover Button.tab Path">
                        <Setter Property="Fill" Value="{DynamicResource ThemeForegroundLowBrush}" />
                    </Style>
                </TabStrip.Styles>
                <TabStrip.DataTemplates>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal" Spacing="2">
                            <StackPanel Orientation="Horizontal" TextBlock.FontSize="12">
                                <TextBlock Classes="default" Text="{Binding Title}" />
                                <!--<TextBlock Classes="default" Text="*" IsVisible="{Binding IsDirty, FallbackValue=False}" />-->
                            </StackPanel>
                            <Button Classes="tab" Height="14" Width="14" Command="{Binding $parent[UserControl].DataContext.CloseContainerView}" CommandParameter="{Binding}">
                                <Path Margin="2" Stretch="Uniform" UseLayoutRounding="False" Data="M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12L19,6.41Z" />
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </TabStrip.DataTemplates>
            </TabStrip>
            <Carousel Items="{Binding ContainerViews}" SelectedItem="{Binding ContainerView, Mode=TwoWay}" IsVirtualized="False">
                <Carousel.DataTemplates>
                    <DataTemplate>
                        <Border Classes="zoom">
                            <Border Classes="clip" ClipToBounds="True" Background="Transparent" Focusable="True">
                                <Border.KeyBindings>
                                    <!-- Edit -->
                                    <KeyBinding Command="{Binding Selection.Cut}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Ctrl+X"/>
                                    <KeyBinding Command="{Binding Selection.Copy}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Ctrl+C"/>
                                    <KeyBinding Command="{Binding Selection.Paste}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Ctrl+V"/>
                                    <KeyBinding Command="{Binding Selection.Delete}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Delete"/>
                                    <KeyBinding Command="{Binding Selection.Group}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Ctrl+G"/>
                                    <KeyBinding Command="{Binding Selection.SelectAll}" CommandParameter="{Binding $parent[UserControl].DataContext}" Gesture="Ctrl+A"/>
                                    <!-- Tools -->
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="None" Gesture="N"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Selection" Gesture="S"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Line" Gesture="L"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Point" Gesture="P"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="CubicBezier" Gesture="B"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="QuadraticBezier" Gesture="Q"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Conic" Gesture="A"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Path" Gesture="H"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Move" Gesture="M"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Rectangle" Gesture="R"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Ellipse" Gesture="E"/>
                                    <KeyBinding Command="{Binding $parent[UserControl].DataContext.SetTool}" CommandParameter="Text" Gesture="T"/>
                                </Border.KeyBindings>
                                <controls:ZoomControl InputTarget="{Binding $parent[UserControl].DataContext}" DrawTarget="{Binding}" CustomDraw="True" Background="Transparent" ClipToBounds="False"/>
                            </Border>
                        </Border>
                    </DataTemplate>
                </Carousel.DataTemplates>
            </Carousel>
        </DockPanel>
    </Grid>
</UserControl>
